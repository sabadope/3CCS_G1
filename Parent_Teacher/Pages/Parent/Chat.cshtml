@page
@model Parent_Teacher.Pages.Parent.ChatModel
@{
    ViewData["Title"] = "Chat";
}

<h2>Chat</h2>

@if (Model.CurrentUser == null)
{
    <p>Please log in to use the chat.</p>
}
else
{
    <div style="display: flex; gap: 20px;">
        <!-- User List -->
        <div style="width: 25%; border: 1px solid #ccc; padding: 10px; background-color: #f9f9f9; border-radius: 8px;">
            <h4>Chat with:</h4>
            @foreach (var user in Model.UsersList)
            {
                <div style="margin-bottom: 10px;">
                    <a asp-page="./Chat" asp-route-SelectedUserId="@user.Id"
                       style="text-decoration: none; color: @(Model.SelectedUserId == user.Id ? "#007bff" : "#333"); font-weight: @(Model.SelectedUserId == user.Id ? "bold" : "normal")">
                        @user.Name
                    </a>
                </div>
            }
        </div>

        <!-- Chat Box -->
        <div style="flex: 1; border: 1px solid #ccc; padding: 10px; border-radius: 8px;">
            @if (Model.SelectedUserId == 0)
            {
                <p>Select a user to start chatting.</p>
            }
            else
            {
                <div id="chat-box" style="height: 400px; overflow-y: auto; border: 1px solid #aaa; padding: 10px; margin-bottom: 10px; background-color: #fff; border-radius: 6px;">
                    @foreach (var message in Model.MessageList)
                    {
                        var isCurrentUser = message.SenderId == Model.CurrentUser?.Id;
                        <div class="chat-message" style="text-align: @(isCurrentUser ? "right" : "left"); margin-bottom: 10px;">
                            <span style="display: inline-block; background: @(isCurrentUser ? "#d1e7dd" : "#e2e3e5"); padding: 8px 12px; border-radius: 10px; max-width: 75%; word-wrap: break-word;">
                                <strong>@(isCurrentUser ? "You" : Model.UsersList.FirstOrDefault(u => u.Id == message.SenderId)?.Name):</strong>
                                <br />
                                @message.Content
                                <br />
                                <small>@message.Timestamp.ToString("g")</small>
                            </span>
                        </div>
                    }
                </div>

                <!-- Send Message Form -->
                <form method="post" id="sendMessageForm">
                    <input type="hidden" name="SelectedUserId" value="@Model.SelectedUserId" />
                    <textarea name="MessageContent" id="MessageContent" rows="3" style="width: 100%; border-radius: 5px;" placeholder="Type your message..."></textarea>
                    <button id="sendBtn" type="submit" style="margin-top: 10px;" disabled>Send</button>
                </form>
            }
        </div>
    </div>
}

@section Scripts {
    <script>
        const chatBox = document.getElementById("chat-box");
        const sendMessageForm = document.getElementById("sendMessageForm");
        const messageInput = document.getElementById("MessageContent");
        const sendBtn = document.getElementById("sendBtn");
        let lastMessageId = '@(Model.MessageList.LastOrDefault()?.Id ?? 0)';
        const selectedUserId = '@Model.SelectedUserId';

        // Enable/disable send button
        messageInput.addEventListener("input", () => {
            sendBtn.disabled = messageInput.value.trim().length === 0;
        });

        // Handle Enter key
        messageInput.addEventListener("keydown", (e) => {
            if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault();
                if (!sendBtn.disabled) sendBtn.click();
            }
        });

        // Submit message instantly
        sendMessageForm.addEventListener("submit", function (e) {
            e.preventDefault();

            const content = messageInput.value.trim();
            if (!content) return;

            const formData = new FormData(sendMessageForm);

            // Add immediately
            const msgDiv = document.createElement("div");
            msgDiv.style.textAlign = "right";
            msgDiv.className = "chat-message";
            msgDiv.innerHTML = `
                <span style="display: inline-block; background: #d1e7dd; padding: 8px 12px; border-radius: 10px;">
                    <strong>You:</strong><br />
                    ${content}<br />
                    <small>Sending...</small>
                </span>`;
            chatBox.appendChild(msgDiv);
            chatBox.scrollTop = chatBox.scrollHeight;
            messageInput.value = "";
            sendBtn.disabled = true;

            fetch("?handler=SendMessage", {
                method: "POST",
                body: formData
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    msgDiv.querySelector("small").innerText = data.timestamp;
                    lastMessageId++; // incrementally trust new one
                }
            });
        });

        function fetchNewMessages() {
            if (!selectedUserId) return;

            fetch(`?handler=NewMessages&selectedUserId=${selectedUserId}&lastMessageId=${lastMessageId}`)
                .then(res => res.json())
                .then(data => {
                    if (data.success && data.messages.length > 0) {
                        data.messages.forEach(msg => {
                            const isCurrentUser = msg.senderId === @Model.CurrentUser?.Id;
                            const msgDiv = document.createElement("div");
                            msgDiv.className = "chat-message";
                            msgDiv.style.textAlign = isCurrentUser ? "right" : "left";
                            msgDiv.innerHTML = `
                                <span style="display: inline-block; background: ${isCurrentUser ? '#d1e7dd' : '#e2e3e5'}; padding: 8px 12px; border-radius: 10px;">
                                    <strong>${isCurrentUser ? 'You' : 'Them'}:</strong><br />
                                    ${msg.content}<br />
                                    <small>${new Date(msg.timestamp).toLocaleString()}</small>
                                </span>`;
                            chatBox.appendChild(msgDiv);
                            lastMessageId = msg.id;
                        });
                        chatBox.scrollTop = chatBox.scrollHeight;
                    }
                });
        }

        setInterval(fetchNewMessages, 3000); // Only fetch new ones now
    </script>
}
